//
// RelationsTex.swift
// Generated by Step_9_tex
//

import Foundation

struct RelationsTex {
    static var zeroRelations: [[String]] {
        let p1Deg: (Int) -> [String] = { d in
            return d == 0 ? [] : (1 ... d).map { _ in "p1" }
        }
        let k = PathAlg.kk
        var relations: [[String]] = []
        relations += [ ["", "0"] ] // 0
        relations += [
            (1 ... k).map { _ in "p1" },
            ["p1", "p2"], ["p1", "p3"], ["p1", "p4"],
            ["p2", "p2"], ["p2", "p3"], ["p2", "p4"],
            ["p3", "p3"], ["p3", "p4"], ["p4", "p4"],
        ]
        relations += [ ["", "1"] ] // 1
        relations += [
            ["p1", "u2"], ["p4", "u2"],
            ["p1", "u3"], ["p2", "u3"], ["p3", "u3"], ["p4", "u3"],
            ["p1", "u4"], ["p2", "u4"], ["p3", "u4"], ["p4", "u4"]
        ]
        relations += [ ["", "k%2=0"] ]; if true {
            relations += [ ["p2", "u1"], ["p4", "u1"] ]
        }
        relations += [ ["", "k%2=1"] ]; if true {
            relations += [
                p1Deg(k - 1) + ["u1'"], ["p2", "u1'"], ["p3", "u1'"], ["p4", "u1'"],
            ]
        }
        relations += [ ["", "2"] ] // 2
        relations += [
            ["u3", "u3"], ["u3", "u4"], ["u4", "u4"],
            ["p1", "v1"], ["p2", "v1"], ["p3", "v1"],
            ["p1", "v2"], ["p2", "v2"], ["p3", "v2"],
            ["p1", "v3"], ["p2", "v3"], ["p4", "v3"],
            ["p1", "v4"], ["p3", "v4"], ["p4", "v4"],
            ["p2", "v5"], ["p3", "v5"], ["p4", "v5"],
            ["p1", "v6"], ["p2", "v6"], ["p3", "v6"], ["p4", "v6"],
        ]
        relations += [ ["", "k%2=0"] ]; if true {
            relations += [ ["p1", "u1", "u1"], ["p3", "u1", "u1"], ["p2", "u2", "u2"], ["u1", "u4"] ]
        }
        relations += [ ["", "k%2=1"] ]; if true {
            relations += [ ["u1'", "u1'"], ["u1'", "u2"], ["u1'", "u3"], ["u1'", "u4"], ["u2", "u2"] ]
        }
        relations += [ ["", "3"] ] // 3
        relations += [
            ["u2", "v5"], ["u2", "v6"],
            ["u3", "v2"], ["u3", "v3"], ["u3", "v4"], ["u3", "v5"], ["u3", "v6"],
            ["u4", "v1"], ["u4", "v3"], ["u4", "v4"], ["u4", "v5"], ["u4", "v6"],
        ]
        relations += [ ["", "k%2=0"] ]; if true {
            relations += [
                ["u1", "v2"], ["u1", "v4"], ["u1", "v6"],
                ["p2", "w1"], ["p4", "w1"], ["p3", "w2"], ["p4", "w2"],
            ]
        }
        relations += [ ["", "k%2=1"] ]; if true {
            relations += [
                ["u1'", "v1"], ["u1'", "v2"], ["u1'", "v3"], ["u1'", "v4"], ["u1'", "v6"],
                p1Deg(k - 2) + ["u1'", "v5"],
                ["p2", "w1'"], ["p4", "w1'"], ["p3", "w2'"], ["p4", "w2'"],
            ]
        }
        relations += [ ["", "4"] ] // 4
        relations += [
            ["v1", "v2"], ["v1", "v3"], ["v1", "v4"], ["v1", "v5"],
            ["v2", "v3"], ["v2", "v4"], ["v2", "v5"],
            ["v3", "v3"], ["v3", "v4"], ["v3", "v5"], ["v3", "v6"],
            ["v4", "v4"], ["v4", "v5"], ["v4", "v6"],
            p1Deg(k - 2) + ["v5", "v5"], ["v5", "v6"], ["v6", "v6"],
        ]
        relations += [ ["", "k%2=0"] ]; if true {
            relations += [
                ["u1", "w1"], ["u1", "w2"], ["u2", "w1"], ["u2", "w2"], ["u3", "w2"], ["u4", "w1"],
            ]
        }
        relations += [ ["", "k%4=0"] ]; if true {
            relations += [ ["u1", "u1", "v1"] ]
        }
        relations += [ ["", "k%2=1"] ]; if true {
            relations += [
                ["u3", "w2'"], ["u4", "w1'"], ["u1'", "w1'"], ["u1'", "w2'"],
                ["p4", "v1", "v1"], ["p3", "u2", "w1'"],
            ]
        }
        relations += [ ["", "5"] ] // 5
        relations += [ ["", "k%2=0"] ]; if true {
            relations += [
                ["u1", "v1", "v1"], ["v1", "w2"], ["v2", "w1"], ["v3", "w2"],
                ["v4", "w1"], ["v6", "w1"], ["v6", "w2"]
            ]
        }
        relations += [ ["", "k%2=1"] ]; if true {
            relations += [
                ["u2", "v1", "v1"], ["v3", "w1'"], ["v4", "w2'"], ["v6", "w1'"], ["v6", "w2'"]
            ]
        }
        relations += [ ["", "8"] ] // 8
        relations += [ ["", "k%2=0"] ]; if true {
            relations += [ ["v2", "w2", "w2"] ]
        }
        return relations
    }

    static var relations: [([String], [String], String, Int)] {
        let k = PathAlg.kk
        var relations: [([String], [String], String, Int)] = []
        relations += [ (["", "1"], [], "", 0)] // 1
        relations += [ (["", "k%2=0"], [], "", 0)]; if true {
            relations += [ (["p3", "u2"], ["p3", "u1"], "1", 1) ]
        }
        relations += [ (["", "2"], [], "", 0)] // 2
        relations += [ (["p3", "v3"], ["p4", "v1"], "1", 1) ]
        relations += [ (["", "k%2=0"], [], "", 0)]; if true {
            relations += [
                (["u1", "u3"], ["u1", "u2"], "1", 1),
                (["u2", "u3"], ["u1", "u2"], "1", 1),
                (["u1", "u2"], ["p4", "v1"], "1", 1),
                (["u2", "u4"], ["p4", "v2"], "1", 1),
                (["p2", "v4"], ["p4", "v2"], "1", 1),
            ]
        }
        relations += [ (["", "k%4=2"], [], "", 0)]; if true {
            relations += [ (["u1", "u1"], ["p4", "v2"], "1", 1) ]
        }
        relations += [ (["", "k%2=1"], [], "", 0)]; if true {
            relations += [
                (["u2", "u4"], ["u2", "u3"], "1", 1),
                (["u2", "u3"], ["p4", "v1"], "1", 1),
                (["p4", "v2"], ["p4", "v1"], "1", 1),
                (["p2", "v4"], ["p4", "v1"], "1", 1),
            ]
        }
        relations += [ (["", "3"], [], "", 0)] // 3
        relations += [ (["u2", "v2"], ["u2", "v1"], "1", 1) ]
        relations += [ (["", "k%2=0"], [], "", 0)]; if true {
            relations += [
                (["u2", "v1"], ["u1", "v1"], "1", 1),
                (["u2", "v3"], ["u1", "v3"], "1", 1),
                (["u1", "v3"], ["p3", "w1"], "1", 1),
                (["u1", "v5"], ["p1", "w1"], "1", 1),
                (["p1", "w2"], ["p1", "w1"], "1", 1),
                (["u2", "v4"], ["p2", "w2"], "1", 1),
            ]
        }
        relations += [ (["", "k%2=1"], [], "", 0)]; if true {
            relations += [
                (["u1'", "v5"], ["p1", "p1", "w1'"], "1", 1),
                (["u2", "v3"], ["p3", "w1'"], "1", 1),
                (["p1", "w2'"], ["p1", "w1'"], "1", 1),
                (["u2", "v4"], ["p2", "w2'"], "1", 1),
            ]
        }
        relations += [ (["", "4"], [], "", 0)] // 4
        relations += [
            (["v5", "v5"], ["p1", "p1", "t"], "1", 1), // ?
        ]
        relations += [ (["", "k%2=0"], [], "", 0)]; if true {
            relations += [
                (["v1", "v6"], ["u3", "w1"], "1", 1),
                (["v2", "v6"], ["u4", "w2"], "1", 1),
            ]
        }
        relations += [ (["", "k%2=1"], [], "", 0)]; if true {
            relations += [
                (["u2", "w2'"], ["u2", "w1'"], "1", 1),
                (["v1", "v6"], ["u3", "w1'"], "1", 1),
                (["v2", "v6"], ["u4", "w2'"], "1", 1),
                (["u2", "w1\'"], ["p4", "t"], "1", 1),
            ]
        }
        relations += [ (["", "5"], [], "", 0)] // 5
        relations += [ (["", "k%2=0"], [], "", 0)]; if true {
            relations += [
                (["v3", "w1"], ["p3", "u1", "t"], "1", 1),
                (["v4", "w2"], ["p2", "u2", "t"], "1", 1),
                (["v5", "w1"], ["p1", "u1", "t"], "1", 1),
                (["v5", "w2"], ["p1", "u1", "t"], "1", 1)
            ]
        }
        relations += [ (["", "k%2=1"], [], "", 0)]; if true {
            relations += [
                (["v1", "w2'"], ["u3", "t"], "1", 1),
                (["v2", "w1'"], ["u4", "t"], "1", 1),
                (["v3", "w2'"], ["p3", "u2", "t"], "1", 1),
                (["v4", "w1'"], ["p2", "u2", "t"], "1", 1),
                (["v5", "w1'"], ["u1'", "t"], "1", 1),
                (["v5", "w2'"], ["u1'", "t"], "1", 1),
            ]
        }
        relations += [ (["", "6"], [], "", 0)] // 6
        relations += [ (["", "k%2=0"], [], "", 0)]; if true {
            relations += [
                (["w1", "w1"], ["u1", "u1", "t"], "1", 1),
                ((1 ... k - 1).map { _ in "p1" } + ["v5", "t"], ["u2", "u2", "t"], "1", 1),
            ]
        }
        relations += [ (["", "k%2=1"], [], "", 0)]; if true {
            relations += [
                (["w1'", "w1'"], ["p4", "v1", "t"], "1", 1),
                (["w2'", "w2'"], ["p4", "v1", "t"], "1", 1),
            ]
        }
        return relations
    }

    static var sumRelations: [([String], Int, [String], Int, [String])] {
        let k = PathAlg.kk
        var relations: [([String], Int, [String], Int, [String])] = []
        relations += [ (["", "2"], 0, [], 0, [])] // 2
        relations += [
            ((1 ... k - 1).map { _ in "p1" } + ["v5"], k + 1, ["p4", "v1"], k + 1, ["p4", "v2"]),
        ]
        relations += [ (["", "k%2=0"], 0, [], 0, [])]; if true {
            relations += [
                (["u1", "u2"], 1, ["u1", "u1"], k / 2, ["u2", "u2"]),
                (["u2", "u4"], 1, ["u1", "u1"], k / 2 + 1, ["u2", "u2"]),
                (["p4", "v1"], 1, ["u1", "u1"], k / 2, ["u2", "u2"]),
                (["u2", "u2"], 1, ["p4", "v1"], 1, ["p4", "v2"]),
            ]
        }
        relations += [ (["", "k%4=0"], 0, [], 0, [])]; if true {
            relations += [ (["u2", "u4"], 1, ["p4", "v1"], 1, ["u2", "u2"]) ]
        }
        relations += [ (["", "6"], 0, [], 0, [])] // 6
        relations += [ (["", "k%2=0"], 0, [], 0, [])]; if true {
            relations += [
                (["w2", "w2"], 1, ["u1", "u1", "t"], 1, ["u2", "u2", "t"]),
                (["w2", "w2"], k / 2 + 1, ["p4", "v2", "t"], k / 2, ["p4", "v1", "t"]),
                (["w1", "w2"], k / 2, ["p4", "v2", "t"], k / 2, ["p4", "v1", "t"]),
            ]
        }
        relations += [ (["", "k%4=0"], 0, [], 0, [])]; if true {
            relations += [
                (["p4", "v2", "t"], 1, ["u1", "u1", "t"], 1, ["u2", "u2", "t"]),
            ]
        }
        relations += [ (["", "k%2=1"], 0, [], 0, [])]; if true {
            relations += [
                (["w1'", "w2'"], 1, ["p4", "v1", "t"], 1, ["v6", "t"]),
            ]
        }
        return relations
    }
}
